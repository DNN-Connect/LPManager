<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- PLEASE NOTE THAT CHANGES TO THIS FILE WILL NOT TAKE AFFECT UNTIL YOU UNLOAD AND RELOAD YOUR PROJECT! -->
    <!-- 
	 requirements
		
		Subversion: http://subversion.tigris.org/
		MsBuildCommunityTasks: http://msbuildtasks.tigris.org/

	 modifiations to project file:
	
  <Import Project="$(MSBuildProjectDirectory)\_Install\CreateDnnModulePackage.Targets" Condition="Exists('$(MSBuildProjectDirectory)\_Install\CreateDnnModulePackage.targets')" />

	 personalization:
		
  		CompanyName: YourCompany
		ModuleName: ModuleName
  -->
    <PropertyGroup>
        <CompanyName>DNNEurope</CompanyName>
        <ModuleName>LocalizationEditor</ModuleName>
        <InstallDir>$(MSBuildProjectDirectory)\_Install</InstallDir>
        <ReferencePath>$(MSBuildProjectDirectory)\_References</ReferencePath>
        <ResourceZip>$(MSBuildProjectDirectory)\resources.zip</ResourceZip>
        <BinDir>$(MSBuildProjectDirectory)\bin</BinDir>
        <DotNetNukeDir>$(MSBuildProjectDirectory)\..\..\..</DotNetNukeDir>
    </PropertyGroup>

    <Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets" Condition="Exists('$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets')"/>

    <ItemGroup>
        <AssemblyInfoFile Include="$(MSBuildProjectDirectory)\My Project\AssemblyInfo.vb" />
        <dnnFile Include="$(MSBuildProjectDirectory)\$(MSBuildProjectName).dnn" />
    </ItemGroup>
    
    <Target Name="BeforeBuild">
        <CallTarget Targets="SetVersionInfo" />
    </Target>
    <Target Name="AfterBuild">
        <CallTarget Targets="DeployFiles" />
    </Target>
    
    <!-- Set the version numbers in DNN file and Assembly -->
    <Target Name="SetVersionInfo" Condition="Exists('$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets')">
        <Message Text="MSBUILD: getting version from $(InstallDir)\version.txt ..." Importance="high"></Message>
        <!-- Obtain Version information from version.txt -->
        <Version BuildType="None" RevisionType="None" VersionFile="$(InstallDir)\version.txt">
            <Output TaskParameter="Major" PropertyName="Major" />
            <Output TaskParameter="Minor" PropertyName="Minor" />
            <Output TaskParameter="Build" PropertyName="Build" />
            <Output TaskParameter="Revision" PropertyName="Revision" />
        </Version>
        <!-- DNN requires single digits to be prefixed with a zero -->
        <CreateProperty Value="0$(Major)" Condition="$(Major) &lt;= 9" >
            <Output TaskParameter="Value" PropertyName="Major" />
        </CreateProperty>
        <CreateProperty Value="0$(Minor)" Condition="$(Minor) &lt;= 9" >
            <Output TaskParameter="Value" PropertyName="Minor" />
        </CreateProperty>
        <CreateProperty Value="0$(Build)" Condition="$(Build) &lt;= 9" >
            <Output TaskParameter="Value" PropertyName="Build" />
        </CreateProperty>
        <CreateProperty Value="0$(Revision)" Condition="$(Revision) &lt;= 9" >
            <Output TaskParameter="Value" PropertyName="Revision" />
        </CreateProperty>

        <!-- Write new version to assemblyinfo.vb -->
        <Message Text="MSBUILD: Updating @(AssemblyInfoFile) and @(dnnFile) with new version: $(Major).$(Minor).$(Build).$(Revision)" Importance="high"></Message>
        <FileUpdate Files="@(AssemblyInfoFile)" Encoding="ASCII" Regex="AssemblyVersion\(&quot;.*&quot;\)" ReplacementText="AssemblyVersion(&quot;$(Major).$(Minor).$(Build).$(Revision)&quot;)" />
        <FileUpdate Files="@(AssemblyInfoFile)" Encoding="ASCII" Regex="AssemblyFileVersionAttribute\(&quot;.*&quot;\)" ReplacementText="AssemblyFileVersionAttribute(&quot;$(Major).$(Minor).$(Build).$(Revision)&quot;)" />
        <FileUpdate Files="@(AssemblyInfoFile)" Encoding="ASCII" Regex="AssemblyInformationalVersion\(&quot;.*&quot;\)" ReplacementText="AssemblyInformationalVersion(&quot;$(Major).$(Minor).$(Build).$(Revision)&quot;)" />
        <!-- update dnn 4 style version in dnn file -->
        <!--<FileUpdate Files="@(dnnFile)" Regex="&lt;version&gt;.*&lt;/version&gt;"
					ReplacementText="&lt;version&gt;$(Major).$(Minor).$(Build)&lt;/version&gt;" />-->
        <!-- update dnn 5 style version in dnn file -->
        <FileUpdate Files="@(dnnFile)" Regex="&quot;Module&quot; version=&quot;.*&quot;" 
                    ReplacementText="&quot;Module&quot; version=&quot;$(Major).$(Minor).$(Build)&quot;" />
    </Target>

    <Target Name="DeployFiles">
        <MakeDir Directories="$(InstallDir)\$(Major).$(Minor).$(Build)\" />

        <CallTarget Targets="RemoveZips" />
        <CallTarget Targets="ZipInstall" />
        <CallTarget Targets="ZipSource" />
        <CallTarget Targets="CopyFilesToDotNetNuke" Condition="'$(DotNetNukeDir)'!=''" />

    </Target>


    <!-- remove files with same version number from installation dir -->
    <Target Name="RemoveZips" Condition="'$(ConfigurationName)'=='Release'">
        <Message Text="MSBUILD: removing old zips with version $(Major).$(Minor).$(Build) from $(InstallDir)\$(Major).$(Minor).$(Build)\" Importance="high"></Message>
        <CreateItem Include="$(InstallDir)\$(Major).$(Minor).$(Build)\$(CompanyName).$(ModuleName).$(Major).$(Minor).$(Build).Source.zip;
				     $(InstallDir)\$(Major).$(Minor).$(Build)\$(CompanyName).$(ModuleName).$(Major).$(Minor).$(Build).Install.zip;">
            <Output TaskParameter="Include" ItemName="deleteFiles" />
        </CreateItem>
        <Delete ContinueOnError="true" Files="@(deleteFiles)"></Delete>
    </Target>

    <!-- create zip source installer, "manual" approach for greater flexibility -->
    <Target Name="ZipSource" Condition="'$(ConfigurationName)'=='Release' And Exists('$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets')">
        <Message Text="MSBUILD: creating Source Zip file: $(InstallDir)\$(Major).$(Minor).$(Build)\$(CompanyName).$(ModuleName).$(Major).$(Minor).$(Build).Source.zip" Importance="high"></Message>
        <!-- delete resource zip to make it is not there -->
        <Delete ContinueOnError="true" Files="$(ResourceZip)"></Delete>
        
        <!-- get files for resource zip-->
        <CreateItem	Include="$(MSBuildProjectDirectory)\**"
                    	Exclude="$(MSBuildProjectDirectory)\**\.svn\**;
						$(MSBuildProjectDirectory)\_Install\01.*\**;
						$(MSBuildProjectDirectory)\_ReSharper.*\**;
						$(MSBuildProjectDirectory)\**\obj\**;
						$(MSBuildProjectDirectory)\**\bin\**;
						$(MSBuildProjectDirectory)\**\*.user;
						$(MSBuildProjectDirectory)\**\*.suo;
						$(MSBuildProjectDirectory)\*.dnn;
						$(MSBuildProjectDirectory)\resources.zip.manifest;"
						>
            <Output TaskParameter="Include" ItemName="sourceResources" />
        </CreateItem>
        
        <!--get files for source install zip-->
        <CreateItem Include="$(MSBuildProjectDirectory)\bin\*.dll;
					    $(ResourceZip);
					    $(MSBuildProjectDirectory)\**\*.SqlDataProvider;
						$(MSBuildProjectDirectory)\Documentation\*.txt.resources;
						$(MSBuildProjectDirectory)\Documentation\*.htm.resources;
					    $(MSBuildProjectDirectory)\*.dnn;"
                    Exclude="**.*">
            <Output TaskParameter="Include" ItemName="source"/>
        </CreateItem>
        
        <!-- Create resources.zip -->
        <Zip Files="@(sourceResources)" WorkingDirectory="$(MSBuildProjectDirectory)" ZipFileName="$(ResourceZip)" />

        <!-- create source install zip. file will contain folder structure -->
         <Zip Files="@(source)" WorkingDirectory="$(MSBuildProjectDirectory)"
				 ZipFileName="$(InstallDir)\$(Major).$(Minor).$(Build)\$(CompanyName).$(ModuleName).$(Major).$(Minor).$(Build).Source.zip" />

        <!-- cleanup -->
        <Delete Files="$(ResourceZip)"></Delete>
    </Target>

    <!-- creat install zip file -->
    <Target Name="ZipInstall" Condition="'$(ConfigurationName)'=='Release' And Exists('$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets')">
        <Message Text="MSBUILD: creating Installation Zip file: $(InstallDir)\$(Major).$(Minor).$(Build)\$(CompanyName).$(ModuleName).$(Major).$(Minor).$(Build).Install.zip" Importance="high"></Message>
        <!-- delete resource zip to make it is not there -->
        <Delete Files="$(ResourceZip)"></Delete>

        <!-- get files for resource zip-->
        <CreateItem Exclude="$(MSBuildProjectDirectory)\**\.svn\**;
						$(MSBuildProjectDirectory)\_*\**;
						$(MSBuildProjectDirectory)\**\obj\**;
						$(MSBuildProjectDirectory)\**\bin\**;
						$(MSBuildProjectDirectory)\**\My Project\**;
						$(MSBuildProjectDirectory)\*.dnn;
						$(MSBuildProjectDirectory)\resources.zip.manifest;"
					Include="$(MSBuildProjectDirectory)\**\*.ascx;
						$(MSBuildProjectDirectory)\**\*.aspx;
						$(MSBuildProjectDirectory)\**\*.ashx;
						$(MSBuildProjectDirectory)\**\*.css;
						$(MSBuildProjectDirectory)\**\*.xml;
						$(MSBuildProjectDirectory)\**\*.xslt;
						$(MSBuildProjectDirectory)\**\*.js;
					  	$(MSBuildProjectDirectory)\**\*.resx;
						$(MSBuildProjectDirectory)\**\*.rdlc;
						$(MSBuildProjectDirectory)\**\*.gif;
						$(MSBuildProjectDirectory)\**\*.jpg;
						$(MSBuildProjectDirectory)\**\*.png;
						$(MSBuildProjectDirectory)\Documentation\*.txt;
						$(MSBuildProjectDirectory)\Documentation\*.txt.resources;
						$(MSBuildProjectDirectory)\Documentation\*.htm.resources;
						$(MSBuildProjectDirectory)\Documentation\*.htm;"
					>
            <Output TaskParameter="Include" ItemName="resources" />
        </CreateItem>
        
        <!--get files for install zip-->
         <CreateItem Include="$(MSBuildProjectDirectory)\bin\*.dll;
					    $(ResourceZip);
					    $(MSBuildProjectDirectory)\**\*.SqlDataProvider;
						$(MSBuildProjectDirectory)\Documentation\*.txt.resources;
						$(MSBuildProjectDirectory)\Documentation\*.htm.resources;
					    $(MSBuildProjectDirectory)\*.dnn;"
					Exclude="**.*">
            <Output TaskParameter="Include" ItemName="install"/>
        </CreateItem>

        <!-- Create resources.zip -->
        <Zip Files="@(resources)" WorkingDirectory="$(MSBuildProjectDirectory)" ZipFileName="$(ResourceZip)" />

        <!-- create  install zip. file will contain folder structure -->
        <Zip Files="@(install)" WorkingDirectory="$(MSBuildProjectDirectory)"
				 ZipFileName="$(InstallDir)\$(Major).$(Minor).$(Build)\$(CompanyName).$(ModuleName).$(Major).$(Minor).$(Build).Install.zip" />

        <!-- cleanup -->
        <Delete Files="$(ResourceZip)"></Delete>
    </Target>

    <Target Name="CopyFilesToDotNetNuke">
        <!-- Copy assemblies and Debug Info to DNN Bin Dir -->
        <CreateItem Include="$(BinDir)\*.pdb;$(BinDir)\*.dll">
            <Output TaskParameter="Include" ItemName="Assemblies" />
        </CreateItem>
        <Copy SourceFiles="@(Assemblies)" DestinationFolder="$(DotNetNukeDir)\bin\" SkipUnchangedFiles="false" ContinueOnError="true" />
        <Message Text="MSBUILD: Copied @(Assemblies) to $(DotNetNukeDir)\bin\" Importance="high"></Message>
    </Target>
</Project>


